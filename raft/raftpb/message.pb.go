// Code generated by protoc-gen-gogo.
// source: raft/raftpb/message.proto
// DO NOT EDIT!

package raftpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// (etcd raft.raftpb.Message)
type Message struct {
	Type                           MESSAGE_TYPE `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=raftpb.MESSAGE_TYPE" json:"Type,omitempty"`
	From                           uint64       `protobuf:"varint,2,opt,name=From,json=from,proto3" json:"From,omitempty"`
	To                             uint64       `protobuf:"varint,3,opt,name=To,json=to,proto3" json:"To,omitempty"`
	SenderCurrentCommittedIndex    uint64       `protobuf:"varint,4,opt,name=SenderCurrentCommittedIndex,json=senderCurrentCommittedIndex,proto3" json:"SenderCurrentCommittedIndex,omitempty"`
	SenderCurrentTerm              uint64       `protobuf:"varint,5,opt,name=SenderCurrentTerm,json=senderCurrentTerm,proto3" json:"SenderCurrentTerm,omitempty"`
	LogIndex                       uint64       `protobuf:"varint,6,opt,name=LogIndex,json=logIndex,proto3" json:"LogIndex,omitempty"`
	LogTerm                        uint64       `protobuf:"varint,7,opt,name=LogTerm,json=logTerm,proto3" json:"LogTerm,omitempty"`
	Entries                        []Entry      `protobuf:"bytes,8,rep,name=Entries,json=entries" json:"Entries"`
	Snapshot                       Snapshot     `protobuf:"bytes,9,opt,name=Snapshot,json=snapshot" json:"Snapshot"`
	Reject                         bool         `protobuf:"varint,10,opt,name=Reject,json=reject,proto3" json:"Reject,omitempty"`
	RejectHintFollowerLogLastIndex uint64       `protobuf:"varint,11,opt,name=RejectHintFollowerLogLastIndex,json=rejectHintFollowerLogLastIndex,proto3" json:"RejectHintFollowerLogLastIndex,omitempty"`
	Context                        []byte       `protobuf:"bytes,12,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func init() {
	proto.RegisterType((*Message)(nil), "raftpb.Message")
}
func (m *Message) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Message) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintMessage(data, i, uint64(m.Type))
	}
	if m.From != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintMessage(data, i, uint64(m.From))
	}
	if m.To != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintMessage(data, i, uint64(m.To))
	}
	if m.SenderCurrentCommittedIndex != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintMessage(data, i, uint64(m.SenderCurrentCommittedIndex))
	}
	if m.SenderCurrentTerm != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintMessage(data, i, uint64(m.SenderCurrentTerm))
	}
	if m.LogIndex != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintMessage(data, i, uint64(m.LogIndex))
	}
	if m.LogTerm != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintMessage(data, i, uint64(m.LogTerm))
	}
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			data[i] = 0x42
			i++
			i = encodeVarintMessage(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	data[i] = 0x4a
	i++
	i = encodeVarintMessage(data, i, uint64(m.Snapshot.Size()))
	n1, err := m.Snapshot.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.Reject {
		data[i] = 0x50
		i++
		if m.Reject {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.RejectHintFollowerLogLastIndex != 0 {
		data[i] = 0x58
		i++
		i = encodeVarintMessage(data, i, uint64(m.RejectHintFollowerLogLastIndex))
	}
	if len(m.Context) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintMessage(data, i, uint64(len(m.Context)))
		i += copy(data[i:], m.Context)
	}
	return i, nil
}

func encodeFixed64Message(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Message(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMessage(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.From != 0 {
		n += 1 + sovMessage(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovMessage(uint64(m.To))
	}
	if m.SenderCurrentCommittedIndex != 0 {
		n += 1 + sovMessage(uint64(m.SenderCurrentCommittedIndex))
	}
	if m.SenderCurrentTerm != 0 {
		n += 1 + sovMessage(uint64(m.SenderCurrentTerm))
	}
	if m.LogIndex != 0 {
		n += 1 + sovMessage(uint64(m.LogIndex))
	}
	if m.LogTerm != 0 {
		n += 1 + sovMessage(uint64(m.LogTerm))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	l = m.Snapshot.Size()
	n += 1 + l + sovMessage(uint64(l))
	if m.Reject {
		n += 2
	}
	if m.RejectHintFollowerLogLastIndex != 0 {
		n += 1 + sovMessage(uint64(m.RejectHintFollowerLogLastIndex))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (MESSAGE_TYPE(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.From |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.To |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderCurrentCommittedIndex", wireType)
			}
			m.SenderCurrentCommittedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SenderCurrentCommittedIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderCurrentTerm", wireType)
			}
			m.SenderCurrentTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SenderCurrentTerm |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LogIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogTerm", wireType)
			}
			m.LogTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LogTerm |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Snapshot.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reject", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reject = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectHintFollowerLogLastIndex", wireType)
			}
			m.RejectHintFollowerLogLastIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RejectHintFollowerLogLastIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context[:0], data[iNdEx:postIndex]...)
			if m.Context == nil {
				m.Context = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raft/raftpb/message.proto", fileDescriptorMessage) }

var fileDescriptorMessage = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x51, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x26, 0xc6, 0x36, 0x9b, 0x52, 0xd1, 0x55, 0x05, 0x8b, 0x2b, 0x19, 0x8b, 0x93, 0x0f,
	0x34, 0x91, 0xc2, 0x0b, 0x40, 0xab, 0x04, 0x90, 0x52, 0x09, 0x39, 0xb9, 0x70, 0xaa, 0xf2, 0x33,
	0x71, 0x83, 0xe2, 0x1d, 0x6b, 0x77, 0x22, 0x9a, 0x37, 0xe1, 0x91, 0x72, 0xe4, 0xcc, 0x01, 0x41,
	0x78, 0x11, 0xe4, 0x5d, 0x5b, 0x2a, 0x08, 0x7a, 0xb1, 0xfc, 0xfd, 0x8e, 0x67, 0xcc, 0x9f, 0xe9,
	0xd9, 0x8a, 0xfa, 0xd5, 0xa3, 0x9c, 0xf7, 0x0b, 0x30, 0x66, 0x96, 0x43, 0xaf, 0xd4, 0x48, 0x28,
	0x7c, 0xc7, 0x46, 0xe7, 0xf9, 0x9a, 0x6e, 0xb6, 0xf3, 0xde, 0x02, 0x8b, 0x7e, 0x8e, 0x39, 0xf6,
	0xad, 0x3c, 0xdf, 0xae, 0x2c, 0xb2, 0xc0, 0xbe, 0xb9, 0x58, 0xf4, 0xf4, 0x6e, 0x23, 0x28, 0xd2,
	0xbb, 0x5a, 0x88, 0xff, 0x31, 0xea, 0x9a, 0x76, 0x65, 0x3d, 0x2f, 0x8a, 0xee, 0xea, 0x46, 0xcd,
	0x4a, 0x73, 0x83, 0xe4, 0xb4, 0x17, 0xdf, 0x3a, 0x3c, 0xb8, 0x72, 0x11, 0x91, 0x72, 0x6f, 0xba,
	0x2b, 0x41, 0xb2, 0x84, 0xa5, 0xc7, 0x83, 0xd3, 0x9e, 0x4b, 0xf4, 0xae, 0x86, 0x93, 0xc9, 0x9b,
	0xb7, 0xc3, 0xeb, 0xe9, 0xc7, 0x0f, 0xc3, 0xcc, 0xab, 0x7a, 0x85, 0xe0, 0xde, 0x48, 0x63, 0x21,
	0xdb, 0x09, 0x4b, 0xbd, 0xcc, 0x5b, 0x69, 0x2c, 0xc4, 0x31, 0x6f, 0x4f, 0x51, 0x76, 0x2c, 0xd3,
	0x26, 0x14, 0xaf, 0xf9, 0xd9, 0x04, 0xd4, 0x12, 0xf4, 0xe5, 0x56, 0x6b, 0x50, 0x74, 0x89, 0x45,
	0xb1, 0x26, 0x82, 0xe5, 0x7b, 0xb5, 0x84, 0x5b, 0xe9, 0x59, 0xe3, 0x99, 0xf9, 0xbf, 0x45, 0xbc,
	0xe4, 0x27, 0x7f, 0x34, 0x4c, 0x41, 0x17, 0xf2, 0x81, 0xcd, 0x9d, 0x98, 0xbf, 0x05, 0x11, 0xf1,
	0x70, 0x8c, 0xb9, 0x2b, 0xf7, 0xad, 0x29, 0xdc, 0xd4, 0x58, 0x48, 0x1e, 0x8c, 0x31, 0xb7, 0xf9,
	0xc0, 0x4a, 0xc1, 0xc6, 0x41, 0x71, 0xce, 0x83, 0xa1, 0x22, 0xbd, 0x06, 0x23, 0xc3, 0xa4, 0x93,
	0x76, 0x07, 0x8f, 0x9a, 0xb5, 0x2b, 0x7a, 0x77, 0xe1, 0xed, 0xbf, 0x3f, 0x6f, 0x65, 0x01, 0x38,
	0x8f, 0x18, 0xf0, 0x70, 0x52, 0x1f, 0x50, 0x3e, 0x4c, 0x58, 0xda, 0x1d, 0x3c, 0x6e, 0xfc, 0x0d,
	0x5f, 0x47, 0xc2, 0xe6, 0xd0, 0xe2, 0x09, 0xf7, 0x33, 0xf8, 0x04, 0x0b, 0x92, 0x3c, 0x61, 0x69,
	0x98, 0xf9, 0xda, 0x22, 0x31, 0xe2, 0xb1, 0xe3, 0xdf, 0xad, 0x15, 0x8d, 0x70, 0xb3, 0xc1, 0xcf,
	0xa0, 0xc7, 0x98, 0x8f, 0x67, 0x86, 0xdc, 0x1a, 0x5d, 0xfb, 0xad, 0xb1, 0xbe, 0xd7, 0x55, 0x2d,
	0xb7, 0x40, 0x45, 0x70, 0x4b, 0xf2, 0x28, 0x61, 0xe9, 0x51, 0xd6, 0xc0, 0x8b, 0xd3, 0xfd, 0xcf,
	0xb8, 0xb5, 0x3f, 0xc4, 0xec, 0xeb, 0x21, 0x66, 0x3f, 0x0e, 0x31, 0xfb, 0xf2, 0x2b, 0x6e, 0xcd,
	0x7d, 0xfb, 0xe7, 0x5f, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x13, 0x84, 0x87, 0xaf, 0xa2, 0x02,
	0x00, 0x00,
}
