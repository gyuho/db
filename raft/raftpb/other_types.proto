syntax = "proto3";

package raftpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

// NODE_STATE represents the state of a node in a cluster.
enum NODE_STATE {
	FOLLOWER  = 0;
	CANDIDATE = 1;
	LEADER    = 2;
}

// PROGRESS_STATE represents the state of Progress.
// Progress is leader's view of its followers' progress.
// Leader maintains progresses of all followers, and
// replicates entries to the followers based on their progresses.
// Progress has 'MatchIndex' and 'NextIndex'. 'MatchIndex' is the
// highest known matched index of follower entries. If unknown,
// it is set to 0. Then leader replicates entries from 'NextIndex'
// to its last one.
enum PROGRESS_STATE {
	// When a follower is in PROBE state, leader sends at most one message
	// for each heartbeat interval. This is to probe the actual progress of
	// the follower.
	PROBE = 0;

	// When a follower is in REPLICATE state, leader replicates messages
	// by optimistically increasing 'NextIndex' to latest. This is an
	// optimized state for fast log replication. If it fails, leader sets
	// it back to PROBE.
	// The maximum number of entries per message and the maximum number of
	// inflight messages are configurable.
	REPLICATE = 1;

	// Leader changes follower's state from PROBE to SNAPSHOT
	// when the follower has fallen too far behind the leader,
	// and sends snapshot to the follower. Then leader must wait
	// until the success. After snapshot is applied, leader sets
	// it back to PROBE.
	SNAPSHOT = 2;
}
