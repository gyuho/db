// Code generated by protoc-gen-gogo.
// source: raft/raftpb/config_change.proto
// DO NOT EDIT!

/*
	Package raftpb is a generated protocol buffer package.

	It is generated from these files:
		raft/raftpb/config_change.proto
		raft/raftpb/entry.proto
		raft/raftpb/message.proto
		raft/raftpb/message_type.proto
		raft/raftpb/snapshot.proto
		raft/raftpb/states.proto

	It has these top-level messages:
		ConfigChange
		Entry
		Message
		ConfigState
		SnapshotMetadata
		Snapshot
		SoftState
		HardState
*/
package raftpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// (etcd raftpb.ConfChangeType)
type CONFIG_CHANGE_TYPE int32

const (
	CONFIG_CHANGE_TYPE_ADD_NODE    CONFIG_CHANGE_TYPE = 0
	CONFIG_CHANGE_TYPE_REMOVE_NODE CONFIG_CHANGE_TYPE = 1
	CONFIG_CHANGE_TYPE_UPDATE_NODE CONFIG_CHANGE_TYPE = 2
)

var CONFIG_CHANGE_TYPE_name = map[int32]string{
	0: "ADD_NODE",
	1: "REMOVE_NODE",
	2: "UPDATE_NODE",
}
var CONFIG_CHANGE_TYPE_value = map[string]int32{
	"ADD_NODE":    0,
	"REMOVE_NODE": 1,
	"UPDATE_NODE": 2,
}

func (x CONFIG_CHANGE_TYPE) String() string {
	return proto.EnumName(CONFIG_CHANGE_TYPE_name, int32(x))
}
func (CONFIG_CHANGE_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorConfigChange, []int{0}
}

// (etcd raftpb.ConfChange)
type ConfigChange struct {
	Type   CONFIG_CHANGE_TYPE `protobuf:"varint,1,opt,name=Type,json=type,proto3,enum=raftpb.CONFIG_CHANGE_TYPE" json:"Type,omitempty"`
	ID     uint64             `protobuf:"varint,2,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	NodeID uint64             `protobuf:"varint,3,opt,name=NodeID,json=nodeID,proto3" json:"NodeID,omitempty"`
	Data   []byte             `protobuf:"bytes,4,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *ConfigChange) Reset()                    { *m = ConfigChange{} }
func (m *ConfigChange) String() string            { return proto.CompactTextString(m) }
func (*ConfigChange) ProtoMessage()               {}
func (*ConfigChange) Descriptor() ([]byte, []int) { return fileDescriptorConfigChange, []int{0} }

func init() {
	proto.RegisterType((*ConfigChange)(nil), "raftpb.ConfigChange")
	proto.RegisterEnum("raftpb.CONFIG_CHANGE_TYPE", CONFIG_CHANGE_TYPE_name, CONFIG_CHANGE_TYPE_value)
}
func (m *ConfigChange) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ConfigChange) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintConfigChange(data, i, uint64(m.Type))
	}
	if m.ID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintConfigChange(data, i, uint64(m.ID))
	}
	if m.NodeID != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintConfigChange(data, i, uint64(m.NodeID))
	}
	if len(m.Data) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintConfigChange(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	return i, nil
}

func encodeFixed64ConfigChange(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ConfigChange(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintConfigChange(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ConfigChange) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovConfigChange(uint64(m.Type))
	}
	if m.ID != 0 {
		n += 1 + sovConfigChange(uint64(m.ID))
	}
	if m.NodeID != 0 {
		n += 1 + sovConfigChange(uint64(m.NodeID))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovConfigChange(uint64(l))
	}
	return n
}

func sovConfigChange(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfigChange(x uint64) (n int) {
	return sovConfigChange(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConfigChange) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Type |= (CONFIG_CHANGE_TYPE(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NodeID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthConfigChange
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], data[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigChange(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfigChange(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfigChange
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthConfigChange
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfigChange
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfigChange(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfigChange = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfigChange   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorConfigChange = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x4a, 0x4c, 0x2b,
	0xd1, 0x07, 0x11, 0x05, 0x49, 0xfa, 0xc9, 0xf9, 0x79, 0x69, 0x99, 0xe9, 0xf1, 0xc9, 0x19, 0x89,
	0x79, 0xe9, 0xa9, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x10, 0x39, 0x29, 0xdd, 0xf4,
	0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xf4, 0xfc, 0xf4, 0x7c, 0x7d, 0xb0,
	0x74, 0x52, 0x69, 0x1a, 0x98, 0x07, 0xe6, 0x80, 0x59, 0x10, 0x6d, 0x4a, 0x55, 0x5c, 0x3c, 0xce,
	0x60, 0xd3, 0x9c, 0xc1, 0x86, 0x09, 0xe9, 0x71, 0xb1, 0x84, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a,
	0x30, 0x6a, 0xf0, 0x19, 0x49, 0xe9, 0x41, 0x4c, 0xd5, 0x73, 0xf6, 0xf7, 0x73, 0xf3, 0x74, 0x8f,
	0x77, 0xf6, 0x70, 0xf4, 0x73, 0x77, 0x8d, 0x0f, 0x89, 0x0c, 0x70, 0x0d, 0x62, 0x29, 0xa9, 0x2c,
	0x48, 0x15, 0xe2, 0xe3, 0x62, 0xf2, 0x74, 0x91, 0x60, 0x52, 0x60, 0xd4, 0x60, 0x09, 0x62, 0xca,
	0x74, 0x11, 0x12, 0xe3, 0x62, 0xf3, 0xcb, 0x4f, 0x49, 0xf5, 0x74, 0x91, 0x60, 0x06, 0x8b, 0xb1,
	0xe5, 0x81, 0x79, 0x42, 0x42, 0x5c, 0x2c, 0x2e, 0x89, 0x25, 0x89, 0x12, 0x2c, 0x0a, 0x8c, 0x1a,
	0x3c, 0x41, 0x2c, 0x29, 0x89, 0x25, 0x89, 0x5a, 0x2e, 0x5c, 0x42, 0x98, 0xe6, 0x0a, 0xf1, 0x70,
	0x71, 0x38, 0xba, 0xb8, 0xc4, 0xfb, 0xf9, 0xbb, 0xb8, 0x0a, 0x30, 0x08, 0xf1, 0x73, 0x71, 0x07,
	0xb9, 0xfa, 0xfa, 0x87, 0xb9, 0x42, 0x04, 0x18, 0x41, 0x02, 0xa1, 0x01, 0x2e, 0x8e, 0x21, 0x50,
	0x01, 0x26, 0x27, 0x91, 0x13, 0x0f, 0xe5, 0x18, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e,
	0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0xde, 0x33, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x87, 0x71, 0xcf, 0xf3, 0x38, 0x01, 0x00, 0x00,
}
