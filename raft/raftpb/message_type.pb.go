// Code generated by protoc-gen-gogo.
// source: raft/raftpb/message_type.proto
// DO NOT EDIT!

package raftpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// (etcd raft.raftpb.MessageType)
type MESSAGE_TYPE int32

const (
	MESSAGE_TYPE_INTERNAL_TRIGGER_CAMPAIGN                  MESSAGE_TYPE = 0
	MESSAGE_TYPE_INTERNAL_TRIGGER_LEADER_HEARTBEAT          MESSAGE_TYPE = 1
	MESSAGE_TYPE_INTERNAL_TRIGGER_CHECK_QUORUM              MESSAGE_TYPE = 2
	MESSAGE_TYPE_INTERNAL_LEADER_CANNOT_CONNECT_TO_FOLLOWER MESSAGE_TYPE = 3
	MESSAGE_TYPE_LEADER_HEARTBEAT                           MESSAGE_TYPE = 4
	MESSAGE_TYPE_RESPONSE_TO_LEADER_HEARTBEAT               MESSAGE_TYPE = 5
	MESSAGE_TYPE_PRE_CANDIDATE_REQUEST_VOTE                 MESSAGE_TYPE = 6
	MESSAGE_TYPE_RESPONSE_TO_PRE_CANDIDATE_REQUEST_VOTE     MESSAGE_TYPE = 7
	MESSAGE_TYPE_CANDIDATE_REQUEST_VOTE                     MESSAGE_TYPE = 8
	MESSAGE_TYPE_RESPONSE_TO_CANDIDATE_REQUEST_VOTE         MESSAGE_TYPE = 9
	MESSAGE_TYPE_PROPOSAL_TO_LEADER                         MESSAGE_TYPE = 10
	MESSAGE_TYPE_LEADER_APPEND                              MESSAGE_TYPE = 11
	MESSAGE_TYPE_RESPONSE_TO_LEADER_APPEND                  MESSAGE_TYPE = 12
	MESSAGE_TYPE_LEADER_SNAPSHOT                            MESSAGE_TYPE = 13
	MESSAGE_TYPE_INTERNAL_RESPONSE_TO_LEADER_SNAPSHOT       MESSAGE_TYPE = 14
	MESSAGE_TYPE_TRANSFER_LEADER                            MESSAGE_TYPE = 15
	MESSAGE_TYPE_FORCE_ELECTION_TIMEOUT                     MESSAGE_TYPE = 16
	MESSAGE_TYPE_TRIGGER_READ_INDEX                         MESSAGE_TYPE = 17
	MESSAGE_TYPE_READ_INDEX_DATA                            MESSAGE_TYPE = 18
)

var MESSAGE_TYPE_name = map[int32]string{
	0:  "INTERNAL_TRIGGER_CAMPAIGN",
	1:  "INTERNAL_TRIGGER_LEADER_HEARTBEAT",
	2:  "INTERNAL_TRIGGER_CHECK_QUORUM",
	3:  "INTERNAL_LEADER_CANNOT_CONNECT_TO_FOLLOWER",
	4:  "LEADER_HEARTBEAT",
	5:  "RESPONSE_TO_LEADER_HEARTBEAT",
	6:  "PRE_CANDIDATE_REQUEST_VOTE",
	7:  "RESPONSE_TO_PRE_CANDIDATE_REQUEST_VOTE",
	8:  "CANDIDATE_REQUEST_VOTE",
	9:  "RESPONSE_TO_CANDIDATE_REQUEST_VOTE",
	10: "PROPOSAL_TO_LEADER",
	11: "LEADER_APPEND",
	12: "RESPONSE_TO_LEADER_APPEND",
	13: "LEADER_SNAPSHOT",
	14: "INTERNAL_RESPONSE_TO_LEADER_SNAPSHOT",
	15: "TRANSFER_LEADER",
	16: "FORCE_ELECTION_TIMEOUT",
	17: "TRIGGER_READ_INDEX",
	18: "READ_INDEX_DATA",
}
var MESSAGE_TYPE_value = map[string]int32{
	"INTERNAL_TRIGGER_CAMPAIGN":                  0,
	"INTERNAL_TRIGGER_LEADER_HEARTBEAT":          1,
	"INTERNAL_TRIGGER_CHECK_QUORUM":              2,
	"INTERNAL_LEADER_CANNOT_CONNECT_TO_FOLLOWER": 3,
	"LEADER_HEARTBEAT":                           4,
	"RESPONSE_TO_LEADER_HEARTBEAT":               5,
	"PRE_CANDIDATE_REQUEST_VOTE":                 6,
	"RESPONSE_TO_PRE_CANDIDATE_REQUEST_VOTE":     7,
	"CANDIDATE_REQUEST_VOTE":                     8,
	"RESPONSE_TO_CANDIDATE_REQUEST_VOTE":         9,
	"PROPOSAL_TO_LEADER":                         10,
	"LEADER_APPEND":                              11,
	"RESPONSE_TO_LEADER_APPEND":                  12,
	"LEADER_SNAPSHOT":                            13,
	"INTERNAL_RESPONSE_TO_LEADER_SNAPSHOT":       14,
	"TRANSFER_LEADER":                            15,
	"FORCE_ELECTION_TIMEOUT":                     16,
	"TRIGGER_READ_INDEX":                         17,
	"READ_INDEX_DATA":                            18,
}

func (x MESSAGE_TYPE) String() string {
	return proto.EnumName(MESSAGE_TYPE_name, int32(x))
}
func (MESSAGE_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessageType, []int{0} }

func init() {
	proto.RegisterEnum("raftpb.MESSAGE_TYPE", MESSAGE_TYPE_name, MESSAGE_TYPE_value)
}

func init() { proto.RegisterFile("raft/raftpb/message_type.proto", fileDescriptorMessageType) }

var fileDescriptorMessageType = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x13, 0x28, 0x01, 0x86, 0x96, 0x6e, 0x87, 0xaa, 0x12, 0x11, 0xb5, 0x28, 0x82, 0x0a,
	0x45, 0x22, 0x39, 0xf0, 0x04, 0x5b, 0x7b, 0x92, 0x58, 0x38, 0xbb, 0xdb, 0xdd, 0x09, 0x1f, 0xa7,
	0x55, 0x83, 0xd2, 0xc0, 0xa1, 0x72, 0xd4, 0xba, 0x07, 0xde, 0x84, 0x47, 0xea, 0x91, 0x13, 0x67,
	0x08, 0x2f, 0x82, 0xd6, 0x75, 0x4d, 0x25, 0xb7, 0x5c, 0x2c, 0xcf, 0xfe, 0xff, 0xf3, 0xdb, 0xf9,
	0x58, 0x88, 0x4e, 0x8f, 0x8e, 0x8b, 0x41, 0xf8, 0x2c, 0x67, 0x83, 0x93, 0xf9, 0xd9, 0xd9, 0xd1,
	0x62, 0xee, 0x8b, 0x6f, 0xcb, 0x79, 0x7f, 0x79, 0x9a, 0x17, 0x39, 0x76, 0x2e, 0xa5, 0xee, 0x9b,
	0xc5, 0xd7, 0xe2, 0xcb, 0xf9, 0xac, 0xff, 0x39, 0x3f, 0x19, 0x2c, 0xf2, 0x45, 0x3e, 0x28, 0xe5,
	0xd9, 0xf9, 0x71, 0x19, 0x95, 0x41, 0xf9, 0x77, 0x99, 0xd6, 0xfb, 0xb9, 0x06, 0xeb, 0x13, 0x72,
	0x4e, 0x8e, 0xc8, 0xf3, 0x27, 0x43, 0xb8, 0x0b, 0x4f, 0x53, 0xc5, 0x64, 0x95, 0xcc, 0x3c, 0xdb,
	0x74, 0x34, 0x22, 0xeb, 0x63, 0x39, 0x31, 0x32, 0x1d, 0x29, 0xd1, 0xc2, 0x57, 0xb0, 0xd7, 0x90,
	0x33, 0x92, 0x09, 0x59, 0x3f, 0x26, 0x69, 0xf9, 0x80, 0x24, 0x8b, 0x36, 0xee, 0xc1, 0x6e, 0x93,
	0x32, 0xa6, 0xf8, 0x9d, 0x3f, 0x9c, 0x6a, 0x3b, 0x9d, 0x88, 0x3b, 0xd8, 0x87, 0x5e, 0x6d, 0xa9,
	0x08, 0xb1, 0x54, 0x4a, 0xb3, 0x8f, 0xb5, 0x52, 0x14, 0xb3, 0x67, 0xed, 0x87, 0x3a, 0xcb, 0xf4,
	0x07, 0xb2, 0xe2, 0x2e, 0x6e, 0x83, 0x68, 0x5c, 0xb4, 0x86, 0xcf, 0xe1, 0x99, 0x25, 0x67, 0xb4,
	0x72, 0x14, 0xfc, 0x0d, 0xc7, 0x3d, 0x8c, 0xa0, 0x6b, 0x2c, 0x05, 0x76, 0x92, 0x26, 0x92, 0xc9,
	0x5b, 0x3a, 0x9c, 0x92, 0x63, 0xff, 0x5e, 0x33, 0x89, 0x0e, 0xf6, 0x60, 0xff, 0x3a, 0xe1, 0x3f,
	0xde, 0xfb, 0xd8, 0x85, 0x9d, 0x5b, 0xb4, 0x07, 0xb8, 0x0f, 0x2f, 0xae, 0x73, 0x6e, 0xf1, 0x3d,
	0xc4, 0x1d, 0x40, 0x63, 0xb5, 0xd1, 0x2e, 0x8c, 0xe6, 0xaa, 0x62, 0x01, 0xb8, 0x05, 0x1b, 0x55,
	0xf5, 0xd2, 0x18, 0x52, 0x89, 0x78, 0x14, 0x76, 0x71, 0x43, 0x73, 0x95, 0xbc, 0x8e, 0x4f, 0x60,
	0xb3, 0x3a, 0x72, 0x4a, 0x1a, 0x37, 0xd6, 0x2c, 0x36, 0xf0, 0x35, 0xbc, 0xac, 0xc7, 0x7a, 0x43,
	0x72, 0xed, 0x7c, 0x1c, 0xd2, 0xd9, 0x4a, 0xe5, 0x86, 0xf5, 0x0a, 0xc5, 0x66, 0xe8, 0x70, 0xa8,
	0x6d, 0x4c, 0x9e, 0x32, 0x8a, 0x39, 0xd5, 0xca, 0x73, 0x3a, 0x21, 0x3d, 0x65, 0x21, 0x42, 0xe5,
	0x57, 0xbb, 0xb4, 0x24, 0x13, 0x9f, 0xaa, 0x84, 0x3e, 0x8a, 0xad, 0x00, 0xfa, 0x17, 0xfb, 0x44,
	0xb2, 0x14, 0x78, 0xb0, 0x7d, 0xf1, 0x3b, 0x6a, 0x5d, 0xac, 0xa2, 0xf6, 0x8f, 0x55, 0xd4, 0xfe,
	0xb5, 0x8a, 0xda, 0xdf, 0xff, 0x44, 0xad, 0x59, 0xa7, 0x7c, 0x75, 0x6f, 0xff, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x58, 0x12, 0x93, 0x0d, 0xce, 0x02, 0x00, 0x00,
}
