// Code generated by protoc-gen-gogo.
// source: raft/raftpb/message_type.proto
// DO NOT EDIT!

package raftpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// (etcd raftpb.MessageType)
type MESSAGE_TYPE int32

const (
	// INTERNAL_CAMPAIGN_START message is used locally by Candidate/Follower
	// to start an election after election timeout.
	//
	// Every server in Raft starts as a follower, and when it has not received
	// any message from a valid leader before the randomized election timeout,
	// it will start an election to become a leader. To begin an election, a
	// follower increments its current term and becomes or remains Candidate.
	// Then votes for itself and send RequestVote RPCs in parallel to other peers.
	// (Raft 3.4 Leader election)
	//
	// It is an internal(local) message that is never sent to other peers over the network.
	//
	// (etcd: raft.raftpb.MsgHup)
	MESSAGE_TYPE_INTERNAL_CAMPAIGN_START MESSAGE_TYPE = 0
	// INTERNAL_LEADER_SEND_HEARTBEAT message is used locally by Leader,
	// to signal the leader to send a LEADER_HEARTBEAT to its followers.
	// It is triggered periodically after heartbeat timeouts.
	//
	// It is an internal(local) message that is never sent to other peers over the network.
	//
	// (etcd: raft.raftpb.MsgBeat)
	MESSAGE_TYPE_INTERNAL_LEADER_SEND_HEARTBEAT MESSAGE_TYPE = 1
	// INTERNAL_CHECK_QUORUM message is used locally by Leader,
	// to check if quorum of cluster (including itself) is active.
	// And if not, the leader steps down to a follower.
	//
	// Quorum is cluster size / 2 + 1.
	//
	// It is an internal(local) message that is never sent to other peers over the network.
	//
	// (etcd: raft.raftpb.MsgCheckQuorum)
	MESSAGE_TYPE_INTERNAL_CHECK_QUORUM MESSAGE_TYPE = 2
	// LEADER_HEARTBEAT message is heartbeat from the Leader.
	// It is triggered by INTERNAL_LEADER_SEND_HEARTBEAT message, after every heartbeat
	// timeout, and is sent to leader's followers. It is same as an empty
	// raftpb.MsgApp, but includes raftpb.Message.Commit information for
	// followers.
	//
	//   idx1 = Leader.Follower.Progress.Match
	//   idx2 = Leader.raftLog.CommittedIndex
	//   Leader.LEADER_HEARTBEAT.SenderCurrentCommittedIndex = min(idx1, idx2)
	//
	// So that the followers can update their CommittedIndex.
	//
	// (etcd: raft.raftpb.MsgHeartbeat)
	MESSAGE_TYPE_LEADER_HEARTBEAT MESSAGE_TYPE = 3
	// RESPONSE_TO_LEADER_HEARTBEAT message is the response from Follower,
	// for leader's LEADER_HEARTBEAT. It does not contain any information.
	// When a leader receives this message from a follower, the leader marks
	// this follower as active, and sends raftpb.MsgApp if needed.
	//
	// (etcd: raft.raftpb.MsgHeartbeatResp)
	MESSAGE_TYPE_RESPONSE_TO_LEADER_HEARTBEAT MESSAGE_TYPE = 4
	// CANDIDATE_REQUEST_VOTE message is sent by Candiate.
	// It is triggered by an election, and sent with the candidate's
	// information:
	//
	//   Candidate.CANDIDATE_REQUEST_VOTE.LogTerm  = Candidate.raftLog.lastTerm()
	//   Candidate.CANDIDATE_REQUEST_VOTE.LogIndex = Candidate.raftLog.lastIndex()
	//
	// (etcd: raft.raftpb.MsgVote)
	MESSAGE_TYPE_CANDIDATE_REQUEST_VOTE MESSAGE_TYPE = 5
	// RESPONSE_TO_CANDIDATE_REQUEST_VOTE message is the response to CANDIDATE_REQUEST_VOTE.
	//
	//
	// Leader receives CANDIDATE_REQUEST_VOTE from Candidate, and then:
	//
	//   Leader.RESPONSE_TO_CANDIDATE_REQUEST_VOTE.Reject = true
	//
	//
	// Candidate receives CANDIDATE_REQUEST_VOTE from another candidate, and then:
	//
	//   Candidate.RESPONSE_TO_CANDIDATE_REQUEST_VOTE.Reject = true
	//
	//
	// Follower receives CANDIDATE_REQUEST_VOTE from Candidate, and IF:
	//
	//   i) Candidate.Message.LogTerm > Follower.raftLog.lastTerm()
	//   OR
	//   ii) Candidate.Message.LogTerm == Follower.raftLog.lastTerm()
	//       AND
	//       Candidate.Message.LogIndex >= Follower.raftLog.lastIndex()
	//
	//   THEN
	//      Follower.RESPONSE_TO_CANDIDATE_REQUEST_VOTE.To     = Candidate
	//      Follower.RESPONSE_TO_CANDIDATE_REQUEST_VOTE.Reject = false
	//
	//   ELSE
	//      Follower.RESPONSE_TO_CANDIDATE_REQUEST_VOTE.To     = Candidate
	//      Follower.RESPONSE_TO_CANDIDATE_REQUEST_VOTE.Reject = true
	//
	// (etcd: raft.raftpb.MsgVoteResp)
	MESSAGE_TYPE_RESPONSE_TO_CANDIDATE_REQUEST_VOTE MESSAGE_TYPE = 6
	// PROPOSAL message is used to forward client requests to its
	// leader, because client requests in Raft are processed through the
	// leader. First option is for the server to reject the request and
	// return the endpoint of the leader to the client. Or the server can proxy
	// the client's requests to the leader without rejection, so that clients
	// can talk to any node in the cluster.
	// (Raft 6.2 Routing requests to the leader)
	//
	// For Leader/Candidate, it is an internal(local) message that is never
	// sent to other peers over the network. For Follower, it is forwarded
	// to Leader over the network.
	//
	// It is triggered whenever local node.Propose, only contains:
	//
	//   Leader/Candidate/Follower.PROPOSAL.Entries = Entries
	//
	//
	// Leader receives Leader.PROPOSAL:
	//
	//   Leader.appendEntry(Leader.PROPOSAL.Entries)
	//   Leader.bcastAppend() to followers
	//
	//
	// Candidate receives Candidate.PROPOSAL:
	//
	//   Ignore Candidate.PROPOSAL
	//   because it means that there is no leader
	//
	//
	// Follower receives Follower.PROPOSAL:
	//
	//   i) Ignore Follower.PROPOSAL
	//      if there is no known leader
	//
	//   ii) Send Follower.PROPOSAL to its Leader
	//
	//       Follower.PROPOSAL.To = Leader
	//       Follower.PROPOSAL.Entries = Entries
	//
	//
	// (etcd: raft.raftpb.MsgProp)
	MESSAGE_TYPE_PROPOSAL MESSAGE_TYPE = 7
	// LEADER_REQUEST_APPEND message is only sent by Leader.
	//
	//   newLogIndex   = Leader.Follower.Progress.Next
	//   prevLogIndex  = newLogsIndex - 1
	//   prevLogTerm   = Leader.raftLog.term(prevLogIndex)
	//   entries       = Leader.raftLog.entries(newLogIndex, Leader.maxMsgSize)
	//   leaderCommit  = Leader.raftLog.CommittedIndex
	//
	//   Leader.LEADER_REQUEST_APPEND.SenderCurrentCommittedIndex = leaderCommit
	//   Leader.LEADER_REQUEST_APPEND.LogIndex                    = prevLogIndex
	//   Leader.LEADER_REQUEST_APPEND.LogTerm                     = prevLogTerm
	//   Leader.LEADER_REQUEST_APPEND.Entries                     = entries
	//
	// (etcd: raft.raftpb.MsgApp)
	MESSAGE_TYPE_LEADER_REQUEST_APPEND MESSAGE_TYPE = 8
	// RESPONSE_TO_LEADER_REQUEST_APPEND message is the response to Leader by Follower.
	//
	//   i) response to LEADER_REQUEST_APPEND:
	//
	//      IF
	//         Follower.raftLog.CommittedIndex > Leader.LEADER_REQUEST_APPEND.LogIndex
	//
	//      THEN
	//         Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.To       = Leader
	//         Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.LogIndex = Follower.raftLog.CommittedIndex
	//         Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.Reject   = false
	//
	//      AND THEN
	//         Leader updates Leader.Follower.Progress
	//
	//      ELSE IF
	//         Leader.LEADER_REQUEST_APPEND.LogIndex >= Follower.raftLog.CommittedIndex
	//
	//      AND IF
	//         term1 = Leader.LEADER_REQUEST_APPEND.LogTerm
	//         term2 = Follower.term(Leader.LEADER_REQUEST_APPEND.LogIndex)
	//         term1 == term2
	//
	//         THEN
	//            idx1 = Leader.LEADER_REQUEST_APPEND.SenderCurrentCommittedIndex
	//            idx2 = Leader.LEADER_REQUEST_APPEND.LogIndex + len(new entries)
	//            Follower.raftLog.commitTo(min(idx1, idx2))
	//
	//            Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.To       = Leader
	//            Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.LogIndex = idx2
	//            Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.Reject   = false
	//
	//      ELSE
	//         Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.To         = Leader
	//         Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.LogIndex   = Leader.LEADER_REQUEST_APPEND.LogIndex
	//         Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.Reject     = true
	//         Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.RejectHint = Follower.raftLog.lastIndex()
	//
	//         THEN
	//            Leader gets this Rejection and updates its Follower.Progress with:
	//               idx1 = Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.LogIndex
	//               idx2 = Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.RejectHint + 1
	//               Leader.Follower.Progress.Next = min(idx1, idx2)
	//
	//   (etcd: raft.*raft.handleAppendEntries)
	//
	//
	//   ii) response to LEADER_REQUEST_SNAPSHOT
	//
	//      IF
	//         idx1 = Follower.raftLog.CommittedIndex
	//         idx2 = Leader.LEADER_REQUEST_SNAPSHOT.Index
	//         idx1 >= idx2
	//            THEN false
	//
	//         idx   = Leader.LEADER_REQUEST_SNAPSHOT.Index
	//         term1 = Follower.raftLog.term(Leader.LEADER_REQUEST_SNAPSHOT.Index)
	//         term2 = Leader.LEADER_REQUEST_SNAPSHOT.Term
	//         term1 == term2
	//            THEN Follower.raftLog.commitTo(idx)
	//            AND THEN false
	//
	//      ELSE
	//         true
	//
	//      IF true, THEN successfully recovered the state machine from a snapshot
	//         Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.To       = Leader
	//         Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.LogIndex = Follower.raftLog.lastIndex()
	//         Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.Reject   = false
	//
	//      ELSE ignores snapshot
	//         Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.To       = Leader
	//         Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.LogIndex = Follower.raftLog.CommittedIndex
	//         Follower.RESPONSE_TO_LEADER_REQUEST_APPEND.Reject   = false
	//
	//   (etcd: raft.*raft.handleSnapshot)
	//
	//
	//   iii)
	//      term1 = Follower.Term
	//      term2 = Leader.LEADER_HEARTBEAT.LogTerm
	//      term3 = Leader.LEADER_REQUEST_APPEND.LogTerm
	//      term1 > term2 || term1 > term3
	//
	//         THEN
	//            Follower received message from Leader with a lower term
	//         SO
	//            Follower ignores this message
	//
	//   (etcd: raft.*raft.Step)
	//
	//
	// (etcd: raft.raftpb.MsgAppResp)
	MESSAGE_TYPE_RESPONSE_TO_LEADER_REQUEST_APPEND MESSAGE_TYPE = 9
	// LEADER_REQUEST_SNAPSHOT is only sent by Leader.
	// It is triggered when the Leader tries to replicate its log (sendAppend) but:
	//
	//   i) term, err = Leader.raftLog.term(Leader.Follower.Progress.Next - 1)
	//      err == ErrCompacted
	//
	//   OR
	//
	//   ii) entries, err = Leader.raftLog.entries(Leader.Follower.Progress.Next, Leader.maxMsgSize)
	//       err != nil
	//
	//   THEN
	//      snap = Leader.raftLog.snapshot()
	//      Leader.LEADER_REQUEST_SNAPSHOT.Snapshot = snap
	//      Leader.Follower.Progress.becomeSnapshot(snap.Index)
	//
	//
	// (etcd: raft.raftpb.MsgSnap)
	MESSAGE_TYPE_LEADER_REQUEST_SNAPSHOT MESSAGE_TYPE = 10
	// INTERNAL_RESPONSE_TO_LEADER_REQUEST_SNAPSHOT message is the response to LEADER_REQUEST_SNAPSHOT from Follower.
	//
	// It is an internal(local) message that is never sent to other peers over the network.
	//
	// (etcd: raft.raftpb.MsgSnapStatus)
	MESSAGE_TYPE_INTERNAL_RESPONSE_TO_LEADER_REQUEST_SNAPSHOT MESSAGE_TYPE = 11
	// INTERNAL_UNREACHABLE_FOLLOWER message notifies Leader that Follower is not reachable.
	//
	// It is an internal(local) message that is never sent to other peers over the network.
	//
	// (etcd: raft.raftpb.MsgUnreachable)
	MESSAGE_TYPE_INTERNAL_UNREACHABLE_FOLLOWER MESSAGE_TYPE = 12
	// INTERNAL_LEADER_TRANSFER message allows Leader to transfer its leadership to another.
	//
	// It is an internal(local) message that is never sent to other peers over the network.
	//
	// (etcd: raft.raftpb.MsgTransferLeader)
	MESSAGE_TYPE_INTERNAL_LEADER_TRANSFER MESSAGE_TYPE = 13
	// FORCE_ELECTION_TIMEOUT message makes Leader send time-out message to its peers,
	// so that Follower can force election timeouts and start campaigning. Candidate
	// is already campaigning, so it ignores this message. It is used when the leader
	// transfer is happening.
	//
	// (etcd: raft.raftpb.MsgTimeoutNow)
	MESSAGE_TYPE_FORCE_ELECTION_TIMEOUT MESSAGE_TYPE = 14
	// REQUEST_CURRENT_COMMITTED_INDEX is used to serve clients' read-only queries without
	// going through Raft, but still with 'quorum-get' on. It bypasses the Raft log, but
	// still preserves the linearizability of reads, with lower costs.
	//
	// If a request goes through Raft log, it needs replication, which requires synchronous
	// disk writes in order to append those request entries to its log. Since read-only requests
	// do not change any state of replicated state machine, these writes can be time- and
	// resource-consuming.
	//
	// To bypass the Raft log with linearizable reads:
	//
	//   1. If Leader has not yet committed an entry from SenderCurrentTerm, it waits until it has done so.
	//
	//   2. Leader saves its SenderCurrentCommittedIndex in a local variable 'readIndex', which is used
	//      as a lower bound for the version of the state that read-only queries operate against.
	//
	//   3. Leader must ensure that it hasn't been superseded by a newer Leader,
	//      by issuing a new round of heartbeats and waiting for responses from cluster quorum.
	//
	//   4. These responses from Followers acknowledging the Leader indicates that
	//      there was no other Leader at the moment Leader sent out heartbeats.
	//
	//   5. Therefore, Leader's 'readIndex' was, at the time, the largest committed index,
	//      ever seen by any node in the cluster.
	//
	//   6. Leader now waits for its state machine to advance at least as far as the 'readIndex'.
	//      And this is current enought to satisfy linearizability.
	//
	//   7. Leader can now respond to those read-only client requests.
	//
	// (Raft 6.4 Processing read-only queries more efficiently, page 72)
	// (etcd: raft.raftpb.MsgReadIndex)
	MESSAGE_TYPE_REQUEST_CURRENT_COMMITTED_INDEX MESSAGE_TYPE = 15
	// RESPONSE_TO_REQUEST_CURRENT_COMMITTED_INDEX is response to REQUEST_CURRENT_COMMITTED_INDEX.
	//
	// (Raft 6.4 Processing read-only queries more efficiently, page 72)
	// (etcd: raft.raftpb.MsgReadIndexResp)
	MESSAGE_TYPE_RESPONSE_TO_REQUEST_CURRENT_COMMITTED_INDEX MESSAGE_TYPE = 16
)

var MESSAGE_TYPE_name = map[int32]string{
	0:  "INTERNAL_CAMPAIGN_START",
	1:  "INTERNAL_LEADER_SEND_HEARTBEAT",
	2:  "INTERNAL_CHECK_QUORUM",
	3:  "LEADER_HEARTBEAT",
	4:  "RESPONSE_TO_LEADER_HEARTBEAT",
	5:  "CANDIDATE_REQUEST_VOTE",
	6:  "RESPONSE_TO_CANDIDATE_REQUEST_VOTE",
	7:  "PROPOSAL",
	8:  "LEADER_REQUEST_APPEND",
	9:  "RESPONSE_TO_LEADER_REQUEST_APPEND",
	10: "LEADER_REQUEST_SNAPSHOT",
	11: "INTERNAL_RESPONSE_TO_LEADER_REQUEST_SNAPSHOT",
	12: "INTERNAL_UNREACHABLE_FOLLOWER",
	13: "INTERNAL_LEADER_TRANSFER",
	14: "FORCE_ELECTION_TIMEOUT",
	15: "REQUEST_CURRENT_COMMITTED_INDEX",
	16: "RESPONSE_TO_REQUEST_CURRENT_COMMITTED_INDEX",
}
var MESSAGE_TYPE_value = map[string]int32{
	"INTERNAL_CAMPAIGN_START":                      0,
	"INTERNAL_LEADER_SEND_HEARTBEAT":               1,
	"INTERNAL_CHECK_QUORUM":                        2,
	"LEADER_HEARTBEAT":                             3,
	"RESPONSE_TO_LEADER_HEARTBEAT":                 4,
	"CANDIDATE_REQUEST_VOTE":                       5,
	"RESPONSE_TO_CANDIDATE_REQUEST_VOTE":           6,
	"PROPOSAL":                                     7,
	"LEADER_REQUEST_APPEND":                        8,
	"RESPONSE_TO_LEADER_REQUEST_APPEND":            9,
	"LEADER_REQUEST_SNAPSHOT":                      10,
	"INTERNAL_RESPONSE_TO_LEADER_REQUEST_SNAPSHOT": 11,
	"INTERNAL_UNREACHABLE_FOLLOWER":                12,
	"INTERNAL_LEADER_TRANSFER":                     13,
	"FORCE_ELECTION_TIMEOUT":                       14,
	"REQUEST_CURRENT_COMMITTED_INDEX":              15,
	"RESPONSE_TO_REQUEST_CURRENT_COMMITTED_INDEX":  16,
}

func (x MESSAGE_TYPE) String() string {
	return proto.EnumName(MESSAGE_TYPE_name, int32(x))
}
func (MESSAGE_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessageType, []int{0} }

func init() {
	proto.RegisterEnum("raftpb.MESSAGE_TYPE", MESSAGE_TYPE_name, MESSAGE_TYPE_value)
}

var fileDescriptorMessageType = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x92, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x13, 0x28, 0xa1, 0x0c, 0x01, 0x56, 0xab, 0x72, 0x2a, 0xc5, 0xd0, 0x22, 0xb8, 0xe0,
	0x50, 0x23, 0xf1, 0x04, 0x13, 0x7b, 0xd2, 0x58, 0xd8, 0xbb, 0xdb, 0xdd, 0x31, 0x87, 0xab, 0x51,
	0x83, 0xd2, 0xc0, 0x45, 0xe5, 0xa8, 0x4d, 0x2f, 0x78, 0x13, 0x1e, 0x85, 0x47, 0xe8, 0x25, 0x8f,
	0x00, 0xe1, 0x45, 0x50, 0xdc, 0xd6, 0xad, 0xc2, 0xe9, 0xc6, 0xf2, 0xe8, 0xff, 0xbf, 0x99, 0x5f,
	0xbf, 0x16, 0xa2, 0xfd, 0x9d, 0xdd, 0x69, 0x3c, 0xff, 0x4c, 0x86, 0xf1, 0xde, 0xe8, 0xe0, 0x60,
	0x67, 0x3c, 0x92, 0xe9, 0xe7, 0xc9, 0x68, 0x73, 0xb2, 0x5f, 0x4d, 0x2b, 0xdd, 0x39, 0x96, 0x56,
	0x5f, 0x8c, 0x3f, 0x4d, 0x3f, 0x1e, 0x0e, 0x37, 0x3f, 0x54, 0x7b, 0xf1, 0xb8, 0x1a, 0x57, 0x71,
	0x2d, 0x0f, 0x0f, 0x77, 0xeb, 0xa9, 0x1e, 0xea, 0xbf, 0x63, 0xec, 0xe9, 0xd7, 0x25, 0xe8, 0x16,
	0x14, 0x02, 0x6e, 0x91, 0xf0, 0x7b, 0x47, 0xfa, 0x1e, 0xdc, 0xce, 0x0c, 0x93, 0x37, 0x98, 0x4b,
	0x82, 0x85, 0xc3, 0x6c, 0xcb, 0x48, 0x60, 0xf4, 0xac, 0x5a, 0x7a, 0x03, 0xa2, 0x46, 0xcc, 0x09,
	0x53, 0xf2, 0x12, 0xc8, 0xa4, 0x32, 0x20, 0xf4, 0xdc, 0x23, 0x64, 0xd5, 0xd6, 0x77, 0xe1, 0xe6,
	0xd9, 0x82, 0x01, 0x25, 0xaf, 0x65, 0xbb, 0xb4, 0xbe, 0x2c, 0xd4, 0x05, 0xbd, 0x02, 0xea, 0x84,
	0x3a, 0x03, 0x2e, 0xea, 0x87, 0xb0, 0xe6, 0x29, 0x38, 0x6b, 0x02, 0x09, 0x5b, 0xf9, 0xcd, 0xb1,
	0xa4, 0x57, 0xe1, 0x56, 0x82, 0x26, 0xcd, 0x52, 0x64, 0x12, 0x4f, 0xdb, 0x25, 0x05, 0x96, 0x37,
	0x96, 0x49, 0x5d, 0xd2, 0x4f, 0x60, 0xe3, 0x3c, 0xfd, 0x17, 0x5f, 0x47, 0x77, 0x61, 0xd9, 0x79,
	0xeb, 0x6c, 0xc0, 0x5c, 0x5d, 0x9e, 0x87, 0x3c, 0xb9, 0x73, 0x6a, 0x43, 0xe7, 0xc8, 0xa4, 0x6a,
	0x59, 0x3f, 0x86, 0xf5, 0x3f, 0xc4, 0x59, 0xb0, 0x5d, 0x99, 0xf7, 0xb4, 0x20, 0x05, 0x83, 0x2e,
	0x0c, 0x2c, 0x2b, 0xd0, 0x2f, 0xe1, 0x79, 0xd3, 0xc1, 0x3f, 0x96, 0x35, 0xc4, 0x55, 0xbd, 0x0e,
	0xf7, 0x1b, 0xa2, 0x34, 0x9e, 0x30, 0x19, 0x60, 0x2f, 0x27, 0xe9, 0xdb, 0x3c, 0xb7, 0x6f, 0xc9,
	0xab, 0xae, 0x5e, 0x83, 0x3b, 0x8b, 0xe5, 0xb3, 0x47, 0x13, 0xfa, 0xe4, 0xd5, 0xb5, 0x79, 0x47,
	0x7d, 0xeb, 0x13, 0x12, 0xca, 0x29, 0xe1, 0xcc, 0x1a, 0xe1, 0xac, 0x20, 0x5b, 0xb2, 0xba, 0xae,
	0x1f, 0xc1, 0x83, 0xd3, 0x93, 0x49, 0xe9, 0x3d, 0x19, 0x96, 0xc4, 0x16, 0x45, 0xc6, 0x4c, 0xa9,
	0x64, 0x26, 0xa5, 0x77, 0xea, 0x86, 0x8e, 0xe1, 0xd9, 0xf9, 0xa8, 0xff, 0x03, 0x54, 0x6f, 0xe5,
	0xe8, 0x47, 0xd4, 0x3a, 0x9a, 0x45, 0xed, 0x6f, 0xb3, 0xa8, 0xfd, 0x7d, 0x16, 0xb5, 0xbf, 0xfc,
	0x8c, 0x5a, 0xc3, 0x4e, 0xfd, 0xae, 0x5e, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x81, 0xa4, 0xd6,
	0xef, 0xb0, 0x02, 0x00, 0x00,
}
